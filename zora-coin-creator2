'use client';

import { useState } from 'react';
import {
  WagmiConfig,
  createConfig,
  configureChains,
  useAccount,
  useNetwork,
  useSwitchNetwork,
  http,
} from 'wagmi';
import { base } from 'wagmi/chains';
import { ConnectKitProvider, ConnectKitButton } from 'connectkit';

const { chains, publicClient } = configureChains([base], [http()]);

const config = createConfig({
  autoConnect: true,
  publicClient,
});

export default function Home() {
  return (
    <WagmiConfig config={config}>
      <ConnectKitProvider>
        <ZoraCoinCreator />
      </ConnectKitProvider>
    </WagmiConfig>
  );
}

function ZoraCoinCreator() {
  const { address, isConnected } = useAccount();
  const { chain } = useNetwork();
  const { switchNetwork } = useSwitchNetwork();

  const [name, setName] = useState('');
  const [symbol, setSymbol] = useState('');
  const [description, setDescription] = useState('');
  const [imageURL, setImageURL] = useState('');
  const [status, setStatus] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const validateInputs = () => {
    if (!name.trim()) {
      setStatus('‚ùå Please enter a coin name');
      return false;
    }
    if (!symbol.trim()) {
      setStatus('‚ùå Please enter a symbol');
      return false;
    }
    if (!imageURL.trim() || !imageURL.startsWith('http')) {
      setStatus('‚ùå Please enter a valid image URL');
      return false;
    }
    return true;
  };

  const handleMint = async () => {
    if (!isConnected || !address) {
      setStatus('‚ùå Please connect your wallet');
      return;
    }

    if (chain?.id !== base.id) {
      setStatus('‚ö† Switching to Base network...');
      try {
        await switchNetwork?.(base.id);
      } catch (error) {
        setStatus('‚ùå Failed to switch network. Please switch to Base manually.');
      }
      return;
    }

    if (!validateInputs()) return;

    try {
      setIsLoading(true);
      setStatus('üöÄ Creating your coin on Zora...');

      const res = await fetch('https://create.zora.co/api/editions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name,
          description,
          image: imageURL,
          seller_fee_basis_points: 100,
          symbol,
          creator_address: address,
        }),
      });

      const data = await res.json();

      if (res.ok) {
        setStatus(`‚úÖ Success! View your coin: https://zora.co/collect/${data.address}`);
      } else {
        const errorMsg = data?.error?.message || data?.message || 'Unknown error';
        setStatus(`‚ùå Failed: ${errorMsg}`);
      }
    } catch (e) {
      console.error('Error:', e);
      setStatus('‚ùå Network error. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <main className="p-4 max-w-xl mx-auto">
      <h1 className="text-2xl font-bold mb-4">ü™ô Zora Coin Creator</h1>
      <ConnectKitButton />
      
      {isConnected && (
        <div className="mt-4 space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Coin Name</label>
            <input
              className="w-full p-2 border rounded"
              placeholder="My Awesome Coin"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Symbol</label>
            <input
              className="w-full p-2 border rounded"
              placeholder="COIN"
              value={symbol}
              onChange={(e) => setSymbol(e.target.value)}
              maxLength={5}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Description</label>
            <textarea
              className="w-full p-2 border rounded"
              placeholder="Describe your coin..."
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">Image URL</label>
            <input
              className="w-full p-2 border rounded"
              placeholder="https://example.com/image.png"
              value={imageURL}
              onChange={(e) => setImageURL(e.target.value)}
            />
          </div>
          
          <button
            onClick={handleMint}
            disabled={isLoading}
            className={`w-full py-2 px-4 rounded flex items-center justify-center gap-2 ${
              isLoading ? 'bg-gray-400' : 'bg-black text-white'
            }`}
          >
            {isLoading ? (
              '‚è≥ Processing...'
            ) : (
              <>
                üöÄ Mint Coin
              </>
            )}
          </button>
        </div>
      )}
      
      {status && (
        <div className={`mt-4 p-3 rounded text-sm ${
          status.includes('‚ùå') ? 'bg-red-100 text-red-800' : 
          status.includes('‚úÖ') ? 'bg-green-100 text-green-800' : 
          'bg-blue-100 text-blue-800'
        }`}>
          {status}
        </div>
      )}
      
      {isConnected && chain?.id !== base.id && (
        <div className="mt-4 p-3 bg-yellow-100 text-yellow-800 rounded text-sm">
          ‚ö† Please switch to Base network to mint your coin
        </div>
      )}
    </main>
  );
}
